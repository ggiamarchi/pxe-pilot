{
    "docs": [
        {
            "location": "/",
            "text": "PXE Pilot\n\n\n\n\nPXE Pilot helps you to manage PXE configurations for your hosts through a simple API. His role is very simple, it allows you to:\n\n\n\n\nKnow which configuration is associated with each host\n\n\nTo switch from a configuration to another one for a specific host\n\n\n\n\nThe REST API can be called either directly or using the CLI.\n\n\nWhy this software ?\n\n\nSome other software like Foreman or Cobbler can be used to manage PXE configurations in a more\nsofisticated way. For small deployments where only very basics features are needed, installing\nsuch a solution can appear overkill. In this situation, PXE Pilot could be what you need.\n\n\nSee also \nthe use case\n that leads me to create this project.\n\n\nHow does it work ?\n\n\nPXE pilot knows your hosts (with their MAC addresses) and your PXE configurations (see the\n\"configuration\" section)\n\n\nIt's important to understand that PXE Pilot does not help you to write PXE configurations. PXE Pilot\nbasically manages symlinks at the filesystem level to ensure each host uses the right configuration.\n\n\nWhen a host have several MAC addresses, the first address in the list points to the desired configuration\nand all the others point to the first one. This is to ensure the host will boot on the right configuration\nwhatever the network interface is used to boot.\n\n\nLicense\n\n\nEverything in this repository is published under the MIT license.",
            "title": "Home"
        },
        {
            "location": "/#pxe-pilot",
            "text": "PXE Pilot helps you to manage PXE configurations for your hosts through a simple API. His role is very simple, it allows you to:   Know which configuration is associated with each host  To switch from a configuration to another one for a specific host   The REST API can be called either directly or using the CLI.",
            "title": "PXE Pilot"
        },
        {
            "location": "/#why-this-software",
            "text": "Some other software like Foreman or Cobbler can be used to manage PXE configurations in a more\nsofisticated way. For small deployments where only very basics features are needed, installing\nsuch a solution can appear overkill. In this situation, PXE Pilot could be what you need.  See also  the use case  that leads me to create this project.",
            "title": "Why this software ?"
        },
        {
            "location": "/#how-does-it-work",
            "text": "PXE pilot knows your hosts (with their MAC addresses) and your PXE configurations (see the\n\"configuration\" section)  It's important to understand that PXE Pilot does not help you to write PXE configurations. PXE Pilot\nbasically manages symlinks at the filesystem level to ensure each host uses the right configuration.  When a host have several MAC addresses, the first address in the list points to the desired configuration\nand all the others point to the first one. This is to ensure the host will boot on the right configuration\nwhatever the network interface is used to boot.",
            "title": "How does it work ?"
        },
        {
            "location": "/#license",
            "text": "Everything in this repository is published under the MIT license.",
            "title": "License"
        },
        {
            "location": "/api/",
            "text": "API Documentation\n\n\nRead configurations\n\n\nGET /v1/configurations\n\n\n\n\nResponse\n\n\n{\n    \"configurations\": [\n        {\n            \"name\": \"ubuntu-16.04\"\n        },\n        {\n            \"name\": \"local\"\n        },\n        {\n            \"name\": \"grml-2017.05\"\n        }\n    ]\n}\n\n\n\n\nResponse codes\n\n\n\n\n\n\n\n\nCode\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n20O\n\n\nOk\n\n\nServer configurations have been retrieved\n\n\n\n\n\n\n\n\nShow configurations\n\n\nGET /v1/configurations/<name>\n\n\n\n\nResponse\n\n\n{\n  \"name\": \"local\",\n  \"content\": \"default local\\n\\nlabel local\\n    localboot 0\\n\"\n}\n\n\n\n\nResponse codes\n\n\n\n\n\n\n\n\nCode\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n20O\n\n\nOk\n\n\nConfiguration detail have been retrieved\n\n\n\n\n\n\n\n\nRead hosts\n\n\nGET /v1/hosts\n\n\n\n\nResponse\n\n\n[\n    {\n        \"name\": \"h1\",\n        \"macAddresses\": [\n            \"00:00:00:00:00:01\"\n        ],\n        \"configuration\": null\n    },\n    {\n        \"name\": \"h2\",\n        \"macAddresses\": [\n            \"00:00:00:00:00:02\"\n        ],\n        \"configuration\": {\n            \"name\": \"ubuntu-16.04\"\n        }\n    },\n    {\n        \"name\": \"h3\",\n        \"macAddresses\": [\n            \"00:00:00:00:00:03\",\n            \"00:00:00:00:00:33\"\n        ],\n        \"configuration\": {\n            \"name\": \"local\"\n        }\n    }\n]\n\n\n\n\nResponse codes\n\n\n\n\n\n\n\n\nCode\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n20O\n\n\nOk\n\n\nHost list had been retrieved\n\n\n\n\n\n\n\n\nReboot a host\n\n\nPATCH /v1/hosts/<name>/reboot\n\n\n\n\nResponse codes\n\n\n\n\n\n\n\n\nCode\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nNo Content\n\n\nHost had been successfully rebooted\n\n\n\n\n\n\n404\n\n\nNot Found\n\n\nHost does not exist\n\n\n\n\n\n\n409\n\n\nConflict\n\n\nReboot did not succeed for any reason\n\n\n\n\n\n\n\n\nDeploy a configuration for host(s)\n\n\nPUT /v1/configurations/<configuration_name>/deploy\n\n\n\n\nBody\n\n\n{\n    \"hosts\": [\n        {\n            \"name\": \"h1\"\n        },\n        {\n            \"name\": \"h2\"\n        },\n        {\n            \"mac_address\": \"83:06:0a:00:cf:03\"\n        }\n    ]\n}\n\n\n\n\nError response (code 4xx)\n\n\n{\n    \"message\": \"Configuration not found\"\n}\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nName\n\n\nIn\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhosts\n\n\nbody\n\n\nHost[]\n\n\nYes\n\n\nHosts for whom to deploy configuration\n\n\n\n\n\n\n\n\nHost (object)\n\n\n\n\n\n\n\n\nAttribute\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nstring\n\n\nNo\n\n\nHost name\n\n\n\n\n\n\nmac_address\n\n\nstring\n\n\nNo\n\n\nHost MAC address\n\n\n\n\n\n\nreboot\n\n\nbool\n\n\nNo\n\n\nWhether the host should be rebooted automatically or not\n\n\n\n\n\n\n\n\nResponse codes\n\n\n\n\n\n\n\n\nCode\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nNo Content\n\n\nConfigurations had been deployed\n\n\n\n\n\n\n404\n\n\nNot found\n\n\nEither the configuation or a host is not found\n\n\n\n\n\n\n400\n\n\nBad request\n\n\nMalformed body\n\n\n\n\n\n\n\n\nRefresh hosts information\n\n\nThis API populate the ARP table for all subnets in the PXE Pilot configuration\n\n\nPATCH /v1/refresh\n\n\n\n\nResponse codes\n\n\n\n\n\n\n\n\nCode\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n204\n\n\nNo Content\n\n\nRefresh operation completed without any issue",
            "title": "Api"
        },
        {
            "location": "/api/#api-documentation",
            "text": "",
            "title": "API Documentation"
        },
        {
            "location": "/api/#read-configurations",
            "text": "GET /v1/configurations  Response  {\n    \"configurations\": [\n        {\n            \"name\": \"ubuntu-16.04\"\n        },\n        {\n            \"name\": \"local\"\n        },\n        {\n            \"name\": \"grml-2017.05\"\n        }\n    ]\n}  Response codes     Code  Name  Description      20O  Ok  Server configurations have been retrieved",
            "title": "Read configurations"
        },
        {
            "location": "/api/#show-configurations",
            "text": "GET /v1/configurations/<name>  Response  {\n  \"name\": \"local\",\n  \"content\": \"default local\\n\\nlabel local\\n    localboot 0\\n\"\n}  Response codes     Code  Name  Description      20O  Ok  Configuration detail have been retrieved",
            "title": "Show configurations"
        },
        {
            "location": "/api/#read-hosts",
            "text": "GET /v1/hosts  Response  [\n    {\n        \"name\": \"h1\",\n        \"macAddresses\": [\n            \"00:00:00:00:00:01\"\n        ],\n        \"configuration\": null\n    },\n    {\n        \"name\": \"h2\",\n        \"macAddresses\": [\n            \"00:00:00:00:00:02\"\n        ],\n        \"configuration\": {\n            \"name\": \"ubuntu-16.04\"\n        }\n    },\n    {\n        \"name\": \"h3\",\n        \"macAddresses\": [\n            \"00:00:00:00:00:03\",\n            \"00:00:00:00:00:33\"\n        ],\n        \"configuration\": {\n            \"name\": \"local\"\n        }\n    }\n]  Response codes     Code  Name  Description      20O  Ok  Host list had been retrieved",
            "title": "Read hosts"
        },
        {
            "location": "/api/#reboot-a-host",
            "text": "PATCH /v1/hosts/<name>/reboot  Response codes     Code  Name  Description      204  No Content  Host had been successfully rebooted    404  Not Found  Host does not exist    409  Conflict  Reboot did not succeed for any reason",
            "title": "Reboot a host"
        },
        {
            "location": "/api/#deploy-a-configuration-for-hosts",
            "text": "PUT /v1/configurations/<configuration_name>/deploy  Body  {\n    \"hosts\": [\n        {\n            \"name\": \"h1\"\n        },\n        {\n            \"name\": \"h2\"\n        },\n        {\n            \"mac_address\": \"83:06:0a:00:cf:03\"\n        }\n    ]\n}  Error response (code 4xx)  {\n    \"message\": \"Configuration not found\"\n}  Parameters     Name  In  Type  Required  Description      hosts  body  Host[]  Yes  Hosts for whom to deploy configuration     Host (object)     Attribute  Type  Required  Description      name  string  No  Host name    mac_address  string  No  Host MAC address    reboot  bool  No  Whether the host should be rebooted automatically or not     Response codes     Code  Name  Description      204  No Content  Configurations had been deployed    404  Not found  Either the configuation or a host is not found    400  Bad request  Malformed body",
            "title": "Deploy a configuration for host(s)"
        },
        {
            "location": "/api/#refresh-hosts-information",
            "text": "This API populate the ARP table for all subnets in the PXE Pilot configuration  PATCH /v1/refresh  Response codes     Code  Name  Description      204  No Content  Refresh operation completed without any issue",
            "title": "Refresh hosts information"
        },
        {
            "location": "/quickstart/",
            "text": "Prerequisites\n\n\nUsing PXE Pilot suppose you already have a PXE server (DHCP + TFTP) up and running. PXE Pilot is DHCP\nand TFTP agnostic. It only work at the filesystem level into the TFTP root directory.\n\n\nRunning PXE Pilot\n\n\nConfiguration\n\n\nPXE Pilot needs to know three things:\n\n\n\n\nThe host list to manage\n\n\nThe absolute path to the TFTP root\n\n\nThe directory containing PXE configurations\n\n\n\n\nAll those information are described in the YAML file \n/etc/pxe-pilot/pxe-pilot.yml\n.\n\n\nOptionnaly, IPMI MAC address (or IP address) and credentials can be specified. When IPMI is available,\nPXE Pilot client shows power state for each host.\n\n\nExample:\n\n\n---\n\nhosts:\n  - name: h1\n    mac_addresses: [\"00:00:00:00:00:01\"]\n  - name: h2\n    mac_addresses: [\"00:00:00:00:00:02\"]\n    ipmi:\n      mac_address: \"00:00:00:00:00:a2\"\n      username: \"user\"\n      password: \"pass\"\n      interface: \"lanplus\"\n      subnets: \"10.0.0.0/24\"\n  - name: h3\n    mac_addresses: [\"00:00:00:00:00:03\", \"00:00:00:00:00:33\"]\n\ntftp:\n  root: \"/var/tftp\"\n\nconfiguration:\n  directory: /var/tftp/pxelinux.cfg/conf\n\nserver:\n  port: 3478\n\n\n\n\nRunning PXE Pilot server\n\n\nBasically run\n\n\n$ pxe-pilot server\n\n\n\n\nQuerying PXE Pilot using the CLI\n\n\n$ pxe-pilot --help\n\nUsage: pxe-pilot [OPTIONS] COMMAND [arg...]\n\nPXE Pilot\n\nOptions:\n  -s, --server=\"http://localhost:3478\"   Server URL for PXE Pilot client\n  -d, --debug=false                      Show client logs on stdout\n\nCommands:\n  server       Run PXE Pilot server\n  config       PXE configuration commands\n  host         Host commands\n\nRun 'pxe-pilot COMMAND --help' for more information on a command.\n\n\n\n\nTh following examples assume PXE Pilot server is listening on \nlocalhost:3478\n. If not,\nuse the \n--server\n option to address your PXE Pilot server.\n\n\nList available configurations\n\n\n$ pxe-pilot config list\n\n+--------------+\n|     NAME     |\n+--------------+\n| local        |\n| ubuntu-14.04 |\n| ubuntu-16.04 |\n+--------------+\n\n\n\n\nList hosts\n\n\n$ pxe-pilot host list\n\n+------+---------------+---------------------------------------+-------------------+-----------+-------------+\n| NAME | CONFIGURATION |             MAC ADDRESSES             |    IPMI MAC       | IPMI HOST | POWER STATE |\n+------+---------------+---------------------------------------+-------------------+-----------+-------------+\n| h1   | local         | 00:00:00:00:00:01                     |                   |           |             |\n| h2   |               | 00:00:00:00:00:02                     | 00:00:00:00:00:a2 | 1.2.3.4   | On          |\n| h3   | local         | 00:00:00:00:00:03 | 00:00:00:00:00:33 | \u00a0\u00a0\u00a0               |           |             |\n+------+---------------+---------------------------------------+-------------------+-----------+-------------+\n\n\n\n\nDeploy configuration for host(s)\n\n\nDeploy \nubuntu-16.04\n configuration for hosts \nh2\nand \nh3\n.\n\n\n$ pxe-pilot config deploy ubuntu-16.04 h2 h3\n\n+------+---------------+\n| NAME | CONFIGURATION |\n+------+---------------+\n| h2   | ubuntu-16.04  |\n| h3   | ubuntu-16.04  |\n+------+---------------+",
            "title": "Quickstart"
        },
        {
            "location": "/quickstart/#prerequisites",
            "text": "Using PXE Pilot suppose you already have a PXE server (DHCP + TFTP) up and running. PXE Pilot is DHCP\nand TFTP agnostic. It only work at the filesystem level into the TFTP root directory.",
            "title": "Prerequisites"
        },
        {
            "location": "/quickstart/#running-pxe-pilot",
            "text": "",
            "title": "Running PXE Pilot"
        },
        {
            "location": "/quickstart/#configuration",
            "text": "PXE Pilot needs to know three things:   The host list to manage  The absolute path to the TFTP root  The directory containing PXE configurations   All those information are described in the YAML file  /etc/pxe-pilot/pxe-pilot.yml .  Optionnaly, IPMI MAC address (or IP address) and credentials can be specified. When IPMI is available,\nPXE Pilot client shows power state for each host.  Example:  ---\n\nhosts:\n  - name: h1\n    mac_addresses: [\"00:00:00:00:00:01\"]\n  - name: h2\n    mac_addresses: [\"00:00:00:00:00:02\"]\n    ipmi:\n      mac_address: \"00:00:00:00:00:a2\"\n      username: \"user\"\n      password: \"pass\"\n      interface: \"lanplus\"\n      subnets: \"10.0.0.0/24\"\n  - name: h3\n    mac_addresses: [\"00:00:00:00:00:03\", \"00:00:00:00:00:33\"]\n\ntftp:\n  root: \"/var/tftp\"\n\nconfiguration:\n  directory: /var/tftp/pxelinux.cfg/conf\n\nserver:\n  port: 3478",
            "title": "Configuration"
        },
        {
            "location": "/quickstart/#running-pxe-pilot-server",
            "text": "Basically run  $ pxe-pilot server",
            "title": "Running PXE Pilot server"
        },
        {
            "location": "/quickstart/#querying-pxe-pilot-using-the-cli",
            "text": "$ pxe-pilot --help\n\nUsage: pxe-pilot [OPTIONS] COMMAND [arg...]\n\nPXE Pilot\n\nOptions:\n  -s, --server=\"http://localhost:3478\"   Server URL for PXE Pilot client\n  -d, --debug=false                      Show client logs on stdout\n\nCommands:\n  server       Run PXE Pilot server\n  config       PXE configuration commands\n  host         Host commands\n\nRun 'pxe-pilot COMMAND --help' for more information on a command.  Th following examples assume PXE Pilot server is listening on  localhost:3478 . If not,\nuse the  --server  option to address your PXE Pilot server.  List available configurations  $ pxe-pilot config list\n\n+--------------+\n|     NAME     |\n+--------------+\n| local        |\n| ubuntu-14.04 |\n| ubuntu-16.04 |\n+--------------+  List hosts  $ pxe-pilot host list\n\n+------+---------------+---------------------------------------+-------------------+-----------+-------------+\n| NAME | CONFIGURATION |             MAC ADDRESSES             |    IPMI MAC       | IPMI HOST | POWER STATE |\n+------+---------------+---------------------------------------+-------------------+-----------+-------------+\n| h1   | local         | 00:00:00:00:00:01                     |                   |           |             |\n| h2   |               | 00:00:00:00:00:02                     | 00:00:00:00:00:a2 | 1.2.3.4   | On          |\n| h3   | local         | 00:00:00:00:00:03 | 00:00:00:00:00:33 | \u00a0\u00a0\u00a0               |           |             |\n+------+---------------+---------------------------------------+-------------------+-----------+-------------+  Deploy configuration for host(s)  Deploy  ubuntu-16.04  configuration for hosts  h2 and  h3 .  $ pxe-pilot config deploy ubuntu-16.04 h2 h3\n\n+------+---------------+\n| NAME | CONFIGURATION |\n+------+---------------+\n| h2   | ubuntu-16.04  |\n| h3   | ubuntu-16.04  |\n+------+---------------+",
            "title": "Querying PXE Pilot using the CLI"
        },
        {
            "location": "/usecase/",
            "text": "Here comes a real life example where PXE Pilot can help. This is actually the use case\nthat leads to the creation of PXE Pilot.\n\n\nInitial situation\n\n\nOn a sub-network we have a PXE server to boot hosts over the network. It is composed of\n\n\n\n\nA DHCP server\n\n\nA TFTP server\n\n\nA HTTP (to serve additionnal files after PXE boot)\n\n\n\n\nWe have 3 differents boot configurations:\n\n\n\n\nUbuntu 16.06 Installer\n - This runs the Ubuntu installer in an automated way using a preseed configuration file. When the installation is done the host reboots\n\n\nGRML 2017.05 Live\n - This runs a live distribution with an in-memory filesystem. This boot configuration is useful to run a server in a rescue mode to debug potential issues\n\n\nLocal\n - A PXE configuration that leads the host to boot on the local drive. This is useful when we want to force a host to boot on the local drive even if the network device has  a higher priority in the BIOS boot sequence\n\n\n\n\nHere is the content of the TFTP root directory:\n\n\n|-- pxelinux.cfg\n|   |-- conf\n|   |   |-- ubuntu-16.04\n|   |   |-- grml-2017.05\n|   |   `-- local\n|-- pxelinux.0\n|-- ldlinux.c32\n|-- grml\n|   `-- 2017.05\n|       |-- initrd.img\n|       `-- vmlinuz\n`-- ubuntu\n    `-- 1604\n        |-- initrd.gz\n        `-- linux\n\n\n\n\nAnd here the contemt of the HTTP root directory:\n\n\n.\n|-- grml64-full_2017.05.iso    # Filesystem for the GRML disribution\n|-- ubuntu-16.04.seed          # Preseed configuration for Ubuntu installer\n`-- ubuntu-16.04.sh            # Script executed at the very end of the preseed\n\n\n\n\nAt this point, if we wish a specific host to boot with a specific configuration, we need\nto create a configuration file named after the host's MAC address.\n\n\nLet's say we wish the MAC address \n23:34:a3:e9:09:cc\n to boot with \ngrml-2017.05\n\nconfiguration. We can basically do\n\n\n$ ln -s pxelinux.cfg/conf/grml-2017.05 pxelinux.cfg/01-23-34-a3-e9-09-cc\n\n\n\n\nProblem we wish to solve\n\n\nFirst, let's consider the case where we wish to install Ubuntu 16.04 for a specific host.\n\n\nTo achieve that, what can we do ?\n\n\n\n\nDeploy \nubuntu-16.04\n configuration for this host\n\n\nStart (or restart) the host\n\n\n\n\nThen what's happen ?\n\n\n\n\nThe server PXE boot the Ubuntu installer\n\n\nThe installer loads the \nubuntu-16.04.seed\n file containing preseed instructions\n\n\nThe installation, at the end, loads and executes the script \nubuntu-16.04.sh\n\n\nThe server reboots\n\n\nThe server PXE boot the Ubuntu installer\n\n\n...\n\n\n\n\nDo you see the issue ?\n\n\nAs long as the \nubuntu-16.04\n configuration is present for this host, the host boots on\nthe installer and then reboot in an infinite loop.\n\n\nLooking for a solution\n\n\nOnce the operating system installation is complete, we would like to replace the host's PXE\nconfiguration by the \nlocal\n configuration.\n\n\nThis way, after the installation completes, the server reboots on the freshly installed O/S.\n\n\nIf we are able to do that from the script \nubuntu-16.04.sh\n, it's victory. That said, how\nto change the configuration on the PXE server remotely ?\n\n\nIf there is an API exposing an opreration to switch from a PXE configuration to another\none, we are done.\n\n\nFinally\n\n\nHere comes PXE Pilot !\n\n\nFrom the script \nubuntu-16.04.sh\n, we just need to send a \nPUT\n request\n\n\ncurl -i -X PUT http://pxe-server:3478/configurations/local/deploy -d '\n{\n    \"hosts\": [\n        {\n            \"macAddress\": \"23:34:a3:e9:09:cc\"\n        }\n    ]\n}'",
            "title": "Usecase"
        },
        {
            "location": "/usecase/#initial-situation",
            "text": "On a sub-network we have a PXE server to boot hosts over the network. It is composed of   A DHCP server  A TFTP server  A HTTP (to serve additionnal files after PXE boot)   We have 3 differents boot configurations:   Ubuntu 16.06 Installer  - This runs the Ubuntu installer in an automated way using a preseed configuration file. When the installation is done the host reboots  GRML 2017.05 Live  - This runs a live distribution with an in-memory filesystem. This boot configuration is useful to run a server in a rescue mode to debug potential issues  Local  - A PXE configuration that leads the host to boot on the local drive. This is useful when we want to force a host to boot on the local drive even if the network device has  a higher priority in the BIOS boot sequence   Here is the content of the TFTP root directory:  |-- pxelinux.cfg\n|   |-- conf\n|   |   |-- ubuntu-16.04\n|   |   |-- grml-2017.05\n|   |   `-- local\n|-- pxelinux.0\n|-- ldlinux.c32\n|-- grml\n|   `-- 2017.05\n|       |-- initrd.img\n|       `-- vmlinuz\n`-- ubuntu\n    `-- 1604\n        |-- initrd.gz\n        `-- linux  And here the contemt of the HTTP root directory:  .\n|-- grml64-full_2017.05.iso    # Filesystem for the GRML disribution\n|-- ubuntu-16.04.seed          # Preseed configuration for Ubuntu installer\n`-- ubuntu-16.04.sh            # Script executed at the very end of the preseed  At this point, if we wish a specific host to boot with a specific configuration, we need\nto create a configuration file named after the host's MAC address.  Let's say we wish the MAC address  23:34:a3:e9:09:cc  to boot with  grml-2017.05 \nconfiguration. We can basically do  $ ln -s pxelinux.cfg/conf/grml-2017.05 pxelinux.cfg/01-23-34-a3-e9-09-cc",
            "title": "Initial situation"
        },
        {
            "location": "/usecase/#problem-we-wish-to-solve",
            "text": "First, let's consider the case where we wish to install Ubuntu 16.04 for a specific host.  To achieve that, what can we do ?   Deploy  ubuntu-16.04  configuration for this host  Start (or restart) the host   Then what's happen ?   The server PXE boot the Ubuntu installer  The installer loads the  ubuntu-16.04.seed  file containing preseed instructions  The installation, at the end, loads and executes the script  ubuntu-16.04.sh  The server reboots  The server PXE boot the Ubuntu installer  ...   Do you see the issue ?  As long as the  ubuntu-16.04  configuration is present for this host, the host boots on\nthe installer and then reboot in an infinite loop.",
            "title": "Problem we wish to solve"
        },
        {
            "location": "/usecase/#looking-for-a-solution",
            "text": "Once the operating system installation is complete, we would like to replace the host's PXE\nconfiguration by the  local  configuration.  This way, after the installation completes, the server reboots on the freshly installed O/S.  If we are able to do that from the script  ubuntu-16.04.sh , it's victory. That said, how\nto change the configuration on the PXE server remotely ?  If there is an API exposing an opreration to switch from a PXE configuration to another\none, we are done.",
            "title": "Looking for a solution"
        },
        {
            "location": "/usecase/#finally",
            "text": "Here comes PXE Pilot !  From the script  ubuntu-16.04.sh , we just need to send a  PUT  request  curl -i -X PUT http://pxe-server:3478/configurations/local/deploy -d '\n{\n    \"hosts\": [\n        {\n            \"macAddress\": \"23:34:a3:e9:09:cc\"\n        }\n    ]\n}'",
            "title": "Finally"
        }
    ]
}