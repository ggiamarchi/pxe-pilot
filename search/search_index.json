{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PXE Pilot PXE Pilot helps you to manage PXE configurations for your hosts through a simple API. His role is very simple, it allows you to: Know which configuration is associated with each host To switch from a configuration to another one for a specific host The REST API can be called either directly or using the CLI. Why this software ? Some other software like Foreman or Cobbler can be used to manage PXE configurations in a more sofisticated way. For small deployments where only very basics features are needed, installing such a solution can appear overkill. In this situation, PXE Pilot could be what you need. See also the use case that leads me to create this project. How does it work ? PXE pilot knows your hosts (with their MAC addresses) and your PXE configurations (see the \"configuration\" section) It's important to understand that PXE Pilot does not help you to write PXE configurations. PXE Pilot basically manages symlinks at the filesystem level to ensure each host uses the right configuration. When a host have several MAC addresses, the first address in the list points to the desired configuration and all the others point to the first one. This is to ensure the host will boot on the right configuration whatever the network interface is used to boot. License Everything in this repository is published under the MIT license.","title":"Home"},{"location":"#pxe-pilot","text":"PXE Pilot helps you to manage PXE configurations for your hosts through a simple API. His role is very simple, it allows you to: Know which configuration is associated with each host To switch from a configuration to another one for a specific host The REST API can be called either directly or using the CLI.","title":"PXE Pilot"},{"location":"#why-this-software","text":"Some other software like Foreman or Cobbler can be used to manage PXE configurations in a more sofisticated way. For small deployments where only very basics features are needed, installing such a solution can appear overkill. In this situation, PXE Pilot could be what you need. See also the use case that leads me to create this project.","title":"Why this software ?"},{"location":"#how-does-it-work","text":"PXE pilot knows your hosts (with their MAC addresses) and your PXE configurations (see the \"configuration\" section) It's important to understand that PXE Pilot does not help you to write PXE configurations. PXE Pilot basically manages symlinks at the filesystem level to ensure each host uses the right configuration. When a host have several MAC addresses, the first address in the list points to the desired configuration and all the others point to the first one. This is to ensure the host will boot on the right configuration whatever the network interface is used to boot.","title":"How does it work ?"},{"location":"#license","text":"Everything in this repository is published under the MIT license.","title":"License"},{"location":"api/","text":"API Documentation Read configurations GET /v1/configurations Response { configurations : [ { name : ubuntu-16.04 }, { name : local }, { name : grml-2017.05 } ] } Response codes Code Name Description 20O Ok Server configurations have been retrieved Show configurations GET /v1/configurations/ name Response { name : local , content : default local\\n\\nlabel local\\n localboot 0\\n } Response codes Code Name Description 20O Ok Configuration detail have been retrieved Read hosts GET /v1/hosts Response [ { name : h1 , macAddresses : [ 00:00:00:00:00:01 ], configuration : null }, { name : h2 , macAddresses : [ 00:00:00:00:00:02 ], configuration : { name : ubuntu-16.04 } }, { name : h3 , macAddresses : [ 00:00:00:00:00:03 , 00:00:00:00:00:33 ], configuration : { name : local } } ] Response codes Code Name Description 20O Ok Host list had been retrieved Reboot a host PATCH /v1/hosts/ name /reboot Response codes Code Name Description 204 No Content Host had been successfully rebooted 404 Not Found Host does not exist 409 Conflict Reboot did not succeed for any reason Deploy a configuration for host(s) PUT /v1/configurations/ configuration_name /deploy Body { hosts : [ { name : h1 }, { name : h2 }, { mac_address : 83:06:0a:00:cf:03 } ] } Error response (code 4xx) { message : Configuration not found } Parameters Name In Type Required Description hosts body Host[] Yes Hosts for whom to deploy configuration Host (object) Attribute Type Required Description name string No Host name mac_address string No Host MAC address reboot bool No Whether the host should be rebooted automatically or not Response codes Code Name Description 204 No Content Configurations had been deployed 404 Not found Either the configuation or a host is not found 400 Bad request Malformed body Refresh hosts information This API populate the ARP table for all subnets in the PXE Pilot configuration PATCH /v1/refresh Response codes Code Name Description 204 No Content Refresh operation completed without any issue","title":"API Documentation"},{"location":"api/#api-documentation","text":"","title":"API Documentation"},{"location":"api/#read-configurations","text":"GET /v1/configurations","title":"Read configurations"},{"location":"api/#response","text":"{ configurations : [ { name : ubuntu-16.04 }, { name : local }, { name : grml-2017.05 } ] }","title":"Response"},{"location":"api/#response-codes","text":"Code Name Description 20O Ok Server configurations have been retrieved","title":"Response codes"},{"location":"api/#show-configurations","text":"GET /v1/configurations/ name","title":"Show configurations"},{"location":"api/#response_1","text":"{ name : local , content : default local\\n\\nlabel local\\n localboot 0\\n }","title":"Response"},{"location":"api/#response-codes_1","text":"Code Name Description 20O Ok Configuration detail have been retrieved","title":"Response codes"},{"location":"api/#read-hosts","text":"GET /v1/hosts","title":"Read hosts"},{"location":"api/#response_2","text":"[ { name : h1 , macAddresses : [ 00:00:00:00:00:01 ], configuration : null }, { name : h2 , macAddresses : [ 00:00:00:00:00:02 ], configuration : { name : ubuntu-16.04 } }, { name : h3 , macAddresses : [ 00:00:00:00:00:03 , 00:00:00:00:00:33 ], configuration : { name : local } } ]","title":"Response"},{"location":"api/#response-codes_2","text":"Code Name Description 20O Ok Host list had been retrieved","title":"Response codes"},{"location":"api/#reboot-a-host","text":"PATCH /v1/hosts/ name /reboot","title":"Reboot a host"},{"location":"api/#response-codes_3","text":"Code Name Description 204 No Content Host had been successfully rebooted 404 Not Found Host does not exist 409 Conflict Reboot did not succeed for any reason","title":"Response codes"},{"location":"api/#deploy-a-configuration-for-hosts","text":"PUT /v1/configurations/ configuration_name /deploy","title":"Deploy a configuration for host(s)"},{"location":"api/#body","text":"{ hosts : [ { name : h1 }, { name : h2 }, { mac_address : 83:06:0a:00:cf:03 } ] }","title":"Body"},{"location":"api/#error-response-code-4xx","text":"{ message : Configuration not found }","title":"Error response (code 4xx)"},{"location":"api/#parameters","text":"Name In Type Required Description hosts body Host[] Yes Hosts for whom to deploy configuration","title":"Parameters"},{"location":"api/#host-object","text":"Attribute Type Required Description name string No Host name mac_address string No Host MAC address reboot bool No Whether the host should be rebooted automatically or not","title":"Host (object)"},{"location":"api/#response-codes_4","text":"Code Name Description 204 No Content Configurations had been deployed 404 Not found Either the configuation or a host is not found 400 Bad request Malformed body","title":"Response codes"},{"location":"api/#refresh-hosts-information","text":"This API populate the ARP table for all subnets in the PXE Pilot configuration PATCH /v1/refresh","title":"Refresh hosts information"},{"location":"api/#response-codes_5","text":"Code Name Description 204 No Content Refresh operation completed without any issue","title":"Response codes"},{"location":"quickstart/","text":"Prerequisites Using PXE Pilot suppose you already have a PXE server (DHCP + TFTP) up and running. PXE Pilot is DHCP and TFTP agnostic. It only work at the filesystem level into the TFTP root directory. Running PXE Pilot Configuration PXE Pilot needs to know three things: The host list to manage The absolute path to the TFTP root The directory containing PXE configurations All those information are described in the YAML file /etc/pxe-pilot/pxe-pilot.yml . Optionnaly, IPMI MAC address (or IP address) and credentials can be specified. When IPMI is available, PXE Pilot client shows power state for each host. Example: --- hosts: - name: h1 mac_addresses: [ 00:00:00:00:00:01 ] - name: h2 mac_addresses: [ 00:00:00:00:00:02 ] ipmi: mac_address: 00:00:00:00:00:a2 username: user password: pass interface: lanplus subnets: 10.0.0.0/24 - name: h3 mac_addresses: [ 00:00:00:00:00:03 , 00:00:00:00:00:33 ] tftp: root: /var/tftp configuration: directory: /var/tftp/pxelinux.cfg/conf server: port: 3478 Running PXE Pilot server Basically run $ pxe-pilot server Querying PXE Pilot using the CLI $ pxe-pilot --help Usage: pxe-pilot [OPTIONS] COMMAND [arg...] PXE Pilot Options: -s, --server= http://localhost:3478 Server URL for PXE Pilot client -d, --debug=false Show client logs on stdout Commands: server Run PXE Pilot server config PXE configuration commands host Host commands Run 'pxe-pilot COMMAND --help' for more information on a command. Th following examples assume PXE Pilot server is listening on localhost:3478 . If not, use the --server option to address your PXE Pilot server. List available configurations $ pxe-pilot config list +--------------+ | NAME | +--------------+ | local | | ubuntu-14.04 | | ubuntu-16.04 | +--------------+ List hosts $ pxe-pilot host list +------+---------------+---------------------------------------+-------------------+-----------+-------------+ | NAME | CONFIGURATION | MAC ADDRESSES | IPMI MAC | IPMI HOST | POWER STATE | +------+---------------+---------------------------------------+-------------------+-----------+-------------+ | h1 | local | 00:00:00:00:00:01 | | | | | h2 | | 00:00:00:00:00:02 | 00:00:00:00:00:a2 | 1.2.3.4 | On | | h3 | local | 00:00:00:00:00:03 | 00:00:00:00:00:33 | | | | +------+---------------+---------------------------------------+-------------------+-----------+-------------+ Deploy configuration for host(s) Deploy ubuntu-16.04 configuration for hosts h2 and h3 . $ pxe-pilot config deploy ubuntu-16.04 h2 h3 +------+---------------+ | NAME | CONFIGURATION | +------+---------------+ | h2 | ubuntu-16.04 | | h3 | ubuntu-16.04 | +------+---------------+","title":"Quickstart"},{"location":"quickstart/#prerequisites","text":"Using PXE Pilot suppose you already have a PXE server (DHCP + TFTP) up and running. PXE Pilot is DHCP and TFTP agnostic. It only work at the filesystem level into the TFTP root directory.","title":"Prerequisites"},{"location":"quickstart/#running-pxe-pilot","text":"","title":"Running PXE Pilot"},{"location":"quickstart/#configuration","text":"PXE Pilot needs to know three things: The host list to manage The absolute path to the TFTP root The directory containing PXE configurations All those information are described in the YAML file /etc/pxe-pilot/pxe-pilot.yml . Optionnaly, IPMI MAC address (or IP address) and credentials can be specified. When IPMI is available, PXE Pilot client shows power state for each host. Example: --- hosts: - name: h1 mac_addresses: [ 00:00:00:00:00:01 ] - name: h2 mac_addresses: [ 00:00:00:00:00:02 ] ipmi: mac_address: 00:00:00:00:00:a2 username: user password: pass interface: lanplus subnets: 10.0.0.0/24 - name: h3 mac_addresses: [ 00:00:00:00:00:03 , 00:00:00:00:00:33 ] tftp: root: /var/tftp configuration: directory: /var/tftp/pxelinux.cfg/conf server: port: 3478","title":"Configuration"},{"location":"quickstart/#running-pxe-pilot-server","text":"Basically run $ pxe-pilot server","title":"Running PXE Pilot server"},{"location":"quickstart/#querying-pxe-pilot-using-the-cli","text":"$ pxe-pilot --help Usage: pxe-pilot [OPTIONS] COMMAND [arg...] PXE Pilot Options: -s, --server= http://localhost:3478 Server URL for PXE Pilot client -d, --debug=false Show client logs on stdout Commands: server Run PXE Pilot server config PXE configuration commands host Host commands Run 'pxe-pilot COMMAND --help' for more information on a command. Th following examples assume PXE Pilot server is listening on localhost:3478 . If not, use the --server option to address your PXE Pilot server.","title":"Querying PXE Pilot using the CLI"},{"location":"quickstart/#list-available-configurations","text":"$ pxe-pilot config list +--------------+ | NAME | +--------------+ | local | | ubuntu-14.04 | | ubuntu-16.04 | +--------------+","title":"List available configurations"},{"location":"quickstart/#list-hosts","text":"$ pxe-pilot host list +------+---------------+---------------------------------------+-------------------+-----------+-------------+ | NAME | CONFIGURATION | MAC ADDRESSES | IPMI MAC | IPMI HOST | POWER STATE | +------+---------------+---------------------------------------+-------------------+-----------+-------------+ | h1 | local | 00:00:00:00:00:01 | | | | | h2 | | 00:00:00:00:00:02 | 00:00:00:00:00:a2 | 1.2.3.4 | On | | h3 | local | 00:00:00:00:00:03 | 00:00:00:00:00:33 | | | | +------+---------------+---------------------------------------+-------------------+-----------+-------------+","title":"List hosts"},{"location":"quickstart/#deploy-configuration-for-hosts","text":"Deploy ubuntu-16.04 configuration for hosts h2 and h3 . $ pxe-pilot config deploy ubuntu-16.04 h2 h3 +------+---------------+ | NAME | CONFIGURATION | +------+---------------+ | h2 | ubuntu-16.04 | | h3 | ubuntu-16.04 | +------+---------------+","title":"Deploy configuration for host(s)"},{"location":"usecase/","text":"Here comes a real life example where PXE Pilot can help. This is actually the use case that leads to the creation of PXE Pilot. Initial situation On a sub-network we have a PXE server to boot hosts over the network. It is composed of A DHCP server A TFTP server A HTTP (to serve additionnal files after PXE boot) We have 3 differents boot configurations: Ubuntu 16.06 Installer - This runs the Ubuntu installer in an automated way using a preseed configuration file. When the installation is done the host reboots GRML 2017.05 Live - This runs a live distribution with an in-memory filesystem. This boot configuration is useful to run a server in a rescue mode to debug potential issues Local - A PXE configuration that leads the host to boot on the local drive. This is useful when we want to force a host to boot on the local drive even if the network device has a higher priority in the BIOS boot sequence Here is the content of the TFTP root directory: |-- pxelinux.cfg | |-- conf | | |-- ubuntu-16.04 | | |-- grml-2017.05 | | `-- local |-- pxelinux.0 |-- ldlinux.c32 |-- grml | `-- 2017.05 | |-- initrd.img | `-- vmlinuz `-- ubuntu `-- 1604 |-- initrd.gz `-- linux And here the contemt of the HTTP root directory: . |-- grml64-full_2017.05.iso # Filesystem for the GRML disribution |-- ubuntu-16.04.seed # Preseed configuration for Ubuntu installer `-- ubuntu-16.04.sh # Script executed at the very end of the preseed At this point, if we wish a specific host to boot with a specific configuration, we need to create a configuration file named after the host's MAC address. Let's say we wish the MAC address 23:34:a3:e9:09:cc to boot with grml-2017.05 configuration. We can basically do $ ln -s pxelinux.cfg/conf/grml-2017.05 pxelinux.cfg/01-23-34-a3-e9-09-cc Problem we wish to solve First, let's consider the case where we wish to install Ubuntu 16.04 for a specific host. To achieve that, what can we do ? Deploy ubuntu-16.04 configuration for this host Start (or restart) the host Then what's happen ? The server PXE boot the Ubuntu installer The installer loads the ubuntu-16.04.seed file containing preseed instructions The installation, at the end, loads and executes the script ubuntu-16.04.sh The server reboots The server PXE boot the Ubuntu installer ... Do you see the issue ? As long as the ubuntu-16.04 configuration is present for this host, the host boots on the installer and then reboot in an infinite loop. Looking for a solution Once the operating system installation is complete, we would like to replace the host's PXE configuration by the local configuration. This way, after the installation completes, the server reboots on the freshly installed O/S. If we are able to do that from the script ubuntu-16.04.sh , it's victory. That said, how to change the configuration on the PXE server remotely ? If there is an API exposing an opreration to switch from a PXE configuration to another one, we are done. Finally Here comes PXE Pilot ! From the script ubuntu-16.04.sh , we just need to send a PUT request curl -i -X PUT http://pxe-server:3478/configurations/local/deploy -d ' { hosts : [ { macAddress : 23:34:a3:e9:09:cc } ] }'","title":"Use case"},{"location":"usecase/#initial-situation","text":"On a sub-network we have a PXE server to boot hosts over the network. It is composed of A DHCP server A TFTP server A HTTP (to serve additionnal files after PXE boot) We have 3 differents boot configurations: Ubuntu 16.06 Installer - This runs the Ubuntu installer in an automated way using a preseed configuration file. When the installation is done the host reboots GRML 2017.05 Live - This runs a live distribution with an in-memory filesystem. This boot configuration is useful to run a server in a rescue mode to debug potential issues Local - A PXE configuration that leads the host to boot on the local drive. This is useful when we want to force a host to boot on the local drive even if the network device has a higher priority in the BIOS boot sequence Here is the content of the TFTP root directory: |-- pxelinux.cfg | |-- conf | | |-- ubuntu-16.04 | | |-- grml-2017.05 | | `-- local |-- pxelinux.0 |-- ldlinux.c32 |-- grml | `-- 2017.05 | |-- initrd.img | `-- vmlinuz `-- ubuntu `-- 1604 |-- initrd.gz `-- linux And here the contemt of the HTTP root directory: . |-- grml64-full_2017.05.iso # Filesystem for the GRML disribution |-- ubuntu-16.04.seed # Preseed configuration for Ubuntu installer `-- ubuntu-16.04.sh # Script executed at the very end of the preseed At this point, if we wish a specific host to boot with a specific configuration, we need to create a configuration file named after the host's MAC address. Let's say we wish the MAC address 23:34:a3:e9:09:cc to boot with grml-2017.05 configuration. We can basically do $ ln -s pxelinux.cfg/conf/grml-2017.05 pxelinux.cfg/01-23-34-a3-e9-09-cc","title":"Initial situation"},{"location":"usecase/#problem-we-wish-to-solve","text":"First, let's consider the case where we wish to install Ubuntu 16.04 for a specific host. To achieve that, what can we do ? Deploy ubuntu-16.04 configuration for this host Start (or restart) the host Then what's happen ? The server PXE boot the Ubuntu installer The installer loads the ubuntu-16.04.seed file containing preseed instructions The installation, at the end, loads and executes the script ubuntu-16.04.sh The server reboots The server PXE boot the Ubuntu installer ... Do you see the issue ? As long as the ubuntu-16.04 configuration is present for this host, the host boots on the installer and then reboot in an infinite loop.","title":"Problem we wish to solve"},{"location":"usecase/#looking-for-a-solution","text":"Once the operating system installation is complete, we would like to replace the host's PXE configuration by the local configuration. This way, after the installation completes, the server reboots on the freshly installed O/S. If we are able to do that from the script ubuntu-16.04.sh , it's victory. That said, how to change the configuration on the PXE server remotely ? If there is an API exposing an opreration to switch from a PXE configuration to another one, we are done.","title":"Looking for a solution"},{"location":"usecase/#finally","text":"Here comes PXE Pilot ! From the script ubuntu-16.04.sh , we just need to send a PUT request curl -i -X PUT http://pxe-server:3478/configurations/local/deploy -d ' { hosts : [ { macAddress : 23:34:a3:e9:09:cc } ] }'","title":"Finally"}]}